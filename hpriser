#!/usr/bin/env bash

usage() {
    echo "$0 - Tool to compare property prises"
    echo
    echo "  -h/--help           Print help"
    echo "  -d                  Print debug lines"
    echo
    echo "  -A                  List supported locations"
    echo "  -l <location_id>    Show statistics for <location_id>. Multiple" 
    echo "  -a                  All supported locations. (Takes a while)" 
    echo "  -p <number>         Number of pages to check (more means better precision but slower)"
    echo
    echo "  Filters"
    echo "  -F                  Pick flats (default flats + houses)"
    echo "  -H                  Pick houses (default flats + houses)"
    echo "  -f <xx m^2>         Area from"
    echo "  -t <xx m^2>         Area to"
    echo
    echo "Example:"
    echo "  $0 -Ha -f 80 -t 120"
    echo "      - lists al the locations only house prices with living area"
    echo "        80 - 120 m^2 are considered" 

}

error() {
    color="\e[31m"
    usage_text=$(usage)
    echo -e "${color}${1}\n\n\n${usage_text}" >&2
    exit 2
}

avg() {
    echo "${1} / ${2}" | bc
}

debug() {
    if $debug_flag; then
        echo "[DEBUG]> " "$@"
    fi
}

# Transform long options to short ones
for arg in "$@"; do
    shift
    case "$arg" in
        "--list-locations") set -- "$@" "-a" ;;
        "--help") set -- "$@" "-h" ;;
        *)        set -- "$@" "$arg"
    esac
done

list_locations=false
all_locations_flag=false
flats=false
houses=false
locations=()
area_from=""
area_to=""
debug_flag=false
pages=1
while getopts ":dhAFHal:f:t:p:" opt; do
    case $opt in
        a)
            all_locations_flag=true
        ;;
        A)
            list_locations=true
        ;;
        F)
            flats=true
        ;;
        H)
            houses=true
        ;;
        f)
            area_from="$OPTARG"
        ;;
        t)
            area_to="$OPTARG"
        ;;
        d)
            debug_flag=true
        ;;
        h)
            usage
            exit
        ;;
        l)
            locations=( "${locations[@]}" "$OPTARG")
        ;;
        p)
            pages="$OPTARG"
        ;;
        \?)
            error "Invalid option: -$OPTARG"
        ;;
    esac
done

debug "Will be checkig $pages pages per location"

if ! $flats && ! $houses; then
    flats=true
    houses=true
fi

locations_file="locations.json"
declare -A all_locations
locations_json=$(jq -Mc .[] < $locations_file)
while read -r line; do
    id=$(echo "$line" | jq -Mc .id)
    name=$(echo "$line" | jq -Mc .name)
    all_locations[$id]=$name
    if $list_locations; then
        echo -e "$id\t$name"
    fi
    if $all_locations_flag; then
        locations=( ${locations[@]} $id )
    fi
done <<< "$locations_json"

debug "Location codes to be cheked [" "${locations[@]}" "]"

if $list_locations; then
    exit
fi

if [ ${#locations[@]} -eq 0 ]; then
    error "No location specified"
fi

printf "| %-20s\t| %s | %-10s |\n" "LOCATION" "AVG PRICE" "M^2 (COUNT)"

for location in "${locations[@]}"
do
    debug "Processing location $location"
    filters=""
    if [[ $area_from ]]; then filters="$filters&minLivingArea=$area_from"; fi
    if [[ $area_to ]]; then filters="$filters&maxLivingArea=$area_to"; fi

    objectTypes=""
    if $flats; then objectTypes="$objectTypes,LÃ¤genhet"; fi
    if $houses; then objectTypes="$objectTypes,Villa,Parhus,Radhus,Kedjehus"; fi
    base_endpoint="https://www.booli.se/slutpriser//$location/?objectType=${objectTypes:1}${filters}&sort=soldDate"
    current_page=1
    records=()
    while [  $current_page -le "$pages" ]; do
        endpoint="$base_endpoint&page=$current_page"
        debug "Fetching data from $endpoint"

        result=$(curl -sL --compressed "$endpoint")
        record_json=$(echo "$result" | grep --color=never  -o "\{\"soldPropertiesSearchURL.*\}")
        record_strings=$(echo "$record_json" | jq -Mc .soldProperties[]?)
        if [ ! -z "$record_strings" ]; then
            while read -r record; do
                records=( "${records[@]}" "$record" )
            done <<< "$record_strings"
        else
            debug "Skipping the rest of pages as page $current_page returned 0 results"
            current_page=$pages
        fi
        debug "Curently found ${#records[@]} records"
        current_page=$((current_page + 1))
    done

    record_counter=0
    data=([price]=0 [sqm_price]=0)
    for record in "${records[@]}"; do
        record_counter=$((record_counter + 1))
        this_price=$(echo "$record" | jq .soldPrice.raw)
        this_sqm_price=$(echo "$record" | jq .soldSqmPrice.raw)

        data[price]=$((data[price] + this_price))
        data[sqm_price]=$((data[sqm_price] + this_sqm_price))
    done
    debug "Processed $record_counter records"

    avg_price=$(avg ${data[price]} $record_counter)
    avg_sqm_price=$(avg ${data[sqm_price]} $record_counter)
    printf "| %-20s\t| %'d | %'d (%d) |\n" "${all_locations[$location]}" "${avg_price}" "${avg_sqm_price}" $record_counter
done
